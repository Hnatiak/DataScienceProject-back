from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4578cd9ba148'
down_revision: Union[str, None] = 'bf10607dd076'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the ENUM type
role_enum = postgresql.ENUM('admin', 'moderator', 'user', name='role', create_type=False)

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the ENUM type in the database
    role_enum.create(op.get_bind())

    op.add_column('photos', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('photos', sa.Column('name', sa.String(length=255), nullable=False))
    op.add_column('photos', sa.Column('url', sa.String(length=255), nullable=False))
    op.add_column('photos', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('photos', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.create_foreign_key(None, 'photos', 'users', ['user_id'], ['id'])
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('role', role_enum, nullable=True))
    op.add_column('users', sa.Column('isLoggedIn', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'isLoggedIn')
    op.drop_column('users', 'role')
    op.drop_column('users', 'updated_at')
    op.drop_constraint(None, 'photos', type_='foreignkey')
    op.drop_column('photos', 'updated_at')
    op.drop_column('photos', 'created_at')
    op.drop_column('photos', 'url')
    op.drop_column('photos', 'name')
    op.drop_column('photos', 'user_id')

    # Drop the ENUM type
    role_enum.drop(op.get_bind())
    # ### end Alembic commands ###
